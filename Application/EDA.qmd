---
title: "Exploratory Data Analysis of Spotify Charts data"
author: "Daniel Winkler & Peter Knaus"
date: "2023"
output:
    pdf_document:
        toc: true
        toc_depth: 2
        theme: united
---



# Read in Data and Setup Packages

First, load required packages.

```{r}
library(data.table)
library(dplyr)
library(ggraph)
library(igraph)
library(countrycode)
library(tidyr)
library(stringr)
```

Next up, we read in the data. We classify countries as neighboring if they (on average) share 1 song each half week in the top 10 songs on Spotify.

```{r}
el <- fread("./spotify_connections.csv.gz")
el[, streams_a_s := total_streams_a / max(total_streams_a)] # Normalized Streams
```

As the data contains 671 weeks of observations, 671/2 gives us minimum amount of shared songs in the top 10 for us to classify two countries as connected.

```{r}
el$weight_b <- ifelse(el$weight >= 671/2, 1, 0)
```

One region in the data is `global`, which we remove from the dataset. Further, we define some node properties that will be useful for plotting.

```{r}
# Remove global region and rename "gb" to "uk"
el <- el %>%
  filter(region_a != "global" & region_b != "global") %>%
  mutate(region_a = str_replace(region_a, "gb", "uk"),
         region_b = str_replace(region_b, "gb", "uk"))

# Use codelist dataframe from countrycode package 
# Remove "." from all names to match those in our dataset
codelist$region <- gsub("\\.", "", codelist$cctld)

# Grab relevant sublist from codelist 
sub_codelist <- codelist[, c("region", "iso3c", "continent", "country.name.en")]

# This creates the node properties
node_props <- el %>% 
  
  # We only need one row per node, so we group by and summarise 
  group_by(region_a) %>%
  summarise(total_streams = min(total_streams_a)) %>%
  
  # Some vertices only show up in region_a and some only in region_b, so we perform a full join to have both
  full_join(data.frame(region = sort(unique(el$region_b))), ., c("region" = "region_a")) %>%
  
  # Manually change "gb" to "uk"
  mutate(region = str_replace(region, "gb", "uk")) %>%
  
  # Merge in the node properties from the codelist
  left_join(sub_codelist, by = "region") %>%
  
  # Replace the NA in argentina with an average (it never appears in the first column, so it has no total_streams_a)
  mutate(total_streams = replace_na(total_streams, mean(total_streams, na.rm = TRUE))) %>%
  
  # Scale down total streams
  mutate(total_streams = total_streams/sd(total_streams))
#extra_verts <- c(el$region_a, el$region_b) |> unique()
```

First visualization attempt
```{r}
g <- graph_from_data_frame(el[el$weight_b == 1,], vertices = node_props, directed = FALSE)
plot(g)
```

Transform into adjacency matrix and plot.

```{r}
adj_mat <- as_adjacency_matrix(g)
pheatmap::pheatmap(as.matrix(adj_mat))
```

A plot of the eigen decomposition.

```{r}
# Take spectral decomposition of the unweighted adjacency matrix
eig.A <- eigen(as.matrix(adj_mat))

# Plot posterior clustering
evec.A <- eig.A$vectors

data.frame(V1 = evec.A[,1], V2 = evec.A[,2], Continent = as.factor(V(g)$continent), 
                 size = V(g)$total_streams, code = V(g)$iso3c) %>% 
  ggplot(aes(x = V1, y = V2, color = Continent, size = size, label = code), alpha = 0.15) + 
  #geom_jitter() + 
  geom_text(check_overlap = TRUE, show.legend = FALSE) + 
  theme_minimal() + 
  guides(size = "none") + 
  labs(title = "Data") + 
  scale_color_viridis_d()
```


A more advanced network plot.

```{r}
ggraph(g, layout = 'stress') + 
  geom_edge_link(alpha = 0.15) + # Set edge weight with attributes of g
  #scale_edge_width(range = c(0.5, 2.5)) +  # Constrain edge width
  geom_node_point(aes(size = total_streams, color = continent), alpha = 0.5) + #Set node color with attributes of g
  scale_size(range = c(2,10)) + # Constrain node sizes
  geom_node_text(aes(label = iso3c), repel = TRUE, point.padding = unit(0.5, "lines")) +
  theme_void() +
  scale_color_discrete(name = "Continent") + 
  scale_size_continuous(name = "SD of total streams")
  #theme(legend.position = "none")
```

Finally, some summary statistics.

```{r}
degree <- rowSums(adj_mat)
degree
```

```{r}
betweenness(g, v = V(g), directed = FALSE, weights = NA, normalized = TRUE)
```

```{r}
closeness(g, vids = V(g), weights = NA, normalized = TRUE)
```

```{r}
# Global clustering coefficient
C <- transitivity(g, type = "globalundirected")
C
```


```{r}
# Network average clustering coefficient
C.bar <- transitivity(g, type = "localaverageundirected")
C.bar
```

```{r}
sps <- shortest.paths(g, v = V(g), to = V(g), weights = NA)
mean(sps[upper.tri(sps)])
```
Seems to be pretty "small world"

```{r}
# Density, aka number of edges over total number of possible edges
edge_density(g)
```

```{r}
# Diameter, length of longest short path
diameter(g, directed = FALSE, weights = NA)
```

